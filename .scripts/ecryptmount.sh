#!/bin/bash
#
# Distributed under the GNU GPL <http://www.gnu.org/copyleft/gpl.html>
#               by David Obadia <david@obadia.org>
#
# Tue Dec 11 23:36:56 CET 2012

set -e

if [ "$1" == "--create" ]
then
    shift
    directory="$1"
    [ -z "$directory" ] && exit 1

    mkdir -v -p "$directory"/.ecryptfs "$directory"/.Private

    echo Suggested passphrases:
    if type pwgen &>/dev/null
    then
        pwgen -s 64 3
    else
        for i in `seq 1 3`
        do
            head -c 10000 /dev/urandom | md5sum
        done
    fi

    ecryptfs-wrap-passphrase "$directory"/.ecryptfs/wrapped-passphrase

    touch "$directory"/ENCRYPTED_FOLDER

    chmod -v 500 "$directory"
    chmod -v 700 "$directory"/.ecryptfs "$directory"/.Private
    chmod -v 600 "$directory"/.ecryptfs/wrapped-passphrase "$directory"/ENCRYPTED_FOLDER
else
    directory="$1"
    target="$2"

    [ -d "$directory" ] || exit 1
    [ -z "$target"   ] && target="$directory"

    # Get full paths
    directory="`(cd "$directory" && pwd)`"
    target="`(cd "$target" && pwd)`"

    passfile="$directory/.ecryptfs/wrapped-passphrase"
    sigfile="$directory/.ecryptfs/Private.sig"

    echo -n "Wrapping passphrase: "
    passphrase_output="`ecryptfs-unwrap-passphrase "$passfile"`"
    echo
    passphrase="`echo "$passphrase_output" | tail -1`"
    unset passphrase_output
    
    echo ">>>>> LOADING PASSPHRASE INTO KERNEL KEYRING..."
    keyring_add_output="`echo "$passphrase" | ecryptfs-add-passphrase --fnek`"
    sig="`echo "$keyring_add_output" | grep ^Inserted | head -1 | cut -f 2 -d \[ | cut -f 1 -d \]`"
    sig_fnek="`echo "$keyring_add_output" | grep ^Inserted | tail -1 | cut -f 2 -d \[ | cut -f 1 -d \]`"
    unset passphrase keyring_add_output

    echo ">>>>> SYNCING THE .sig FILE WITH SIGS GENERATED BY ecryptfs-add-passphrase..."
    echo -e "$sig\n$sig_fnek" > "$sigfile".new
    diff "$sigfile" "$sigfile.new" ||
        mv -iv "$sigfile.new" "$sigfile"

    echo ">>>>> PREPARING THE .conf FILE"
    conffile="$directory/.ecryptfs/Private.conf"
    [ -f "$conffile" ] && mv -v "$conffile" "$conffile".old
    echo "$directory"/.Private "$target" ecryptfs > "$conffile"
    chmod -v 600 "$conffile"

    echo ">>>>> LINKING THE .conf INTO $HOME/.ecryptfs"
    mkdir -vp "$HOME"/.ecryptfs
    chmod -v 700 "$HOME"/.ecryptfs
    alias="`echo "$directory" | md5sum | cut -f 1 -d \ `"
    [ -z "$alias" ] && exit 1
    ln -svf "$conffile" "$HOME"/.ecryptfs/"$alias".conf 
    ln -svf "$sigfile"  "$HOME"/.ecryptfs/"$alias".sig

    # Mount it!
    echo ">>>>> MOUNTING $directory ONTO $target"
    mount.ecryptfs_private "$alias"
    # HOME="$directory" mount.ecryptfs_private # If I could do this this would avoid the silly symlinks but can't...

    echo ">>>>> CLEAN UP LINKS FROM $HOME/.ecryptfs"
    rm -v "$HOME"/.ecryptfs/"$alias".conf "$HOME"/.ecryptfs/"$alias".sig

    echo ">>>>> UNLOADING PASSPHRASE FROM KERNEL KEYRING..."
    keyctl unlink `keyctl search @u user "$sig"`
    keyctl unlink `keyctl search @u user "$sig_fnek"`

    echo ">>>>> ALL DONE!"
fi

# Old way to mount (requires root:)

# sig="`head -1 "$sigfile"`"
# sig_fnek="`tail -1 "$sigfile"`"
  
# mount \
#     -t ecryptfs \
#     -o ecryptfs_cipher=aes \
#     -o ecryptfs_key_bytes=16 \
#     -o ecryptfs_passthrough=no \
#     -o ecryptfs_sig="$sig" \
#     -o ecryptfs_fnek_sig="$sig_fnek" \
#     -o ecryptfs_unlink_sigs \
#     -o no_sig_cache \
#     -o key=passphrase:passwd="random useless string? `date -R`" \
#     "$directory"/.Private "$target"
